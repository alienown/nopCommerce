@using Nop.Plugin.Misc.IssueManagement.Models
@using Nop.Plugin.Misc.IssueManagement.Domain

@model EditIssueModel

@{
    Layout = "_AdminLayout";
    ViewBag.PageTitle = T("Plugins.Misc.IssueManagement.Edit.Title").Text;
    Html.SetActiveMenuItemSystemName("New issue");
}

@{
    const string hideBasicInfoBlockAttributeName = "Plugins.Misc.IssueManagement.Edit.BasicInfoPanel";
    var hideBasicInfoPanel = genericAttributeService.GetAttribute<bool>(workContext.CurrentCustomer, hideBasicInfoBlockAttributeName, defaultValue: true);

    const string hidePersonsInvolvedBlockAttributeName = "Plugins.Misc.IssueManagement.Edit.PersonsInvolvedPanel";
    var hidePersonsInvolvedPanel = genericAttributeService.GetAttribute<bool>(workContext.CurrentCustomer, hidePersonsInvolvedBlockAttributeName, defaultValue: true);

    const string hideAssignmentsBlockAttributeName = "Plugins.Misc.IssueManagement.Edit.AssignmentsPanel";
    var hideAssignmentsPanel = genericAttributeService.GetAttribute<bool>(workContext.CurrentCustomer, hideAssignmentsBlockAttributeName, defaultValue: true);

    const string hideHistoryBlockAttributeName = "Plugins.Misc.IssueManagement.Edit.HistoryPanel";
    var hideHistoryPanel = genericAttributeService.GetAttribute<bool>(workContext.CurrentCustomer, hideHistoryBlockAttributeName, defaultValue: true);
}

<div class="content-header clearfix">
    <h1 class="pull-left">
        @($"{T("Plugins.Misc.IssueManagement.Edit.Title").Text} {Model.BasicInfoPanelModel.Name}")
        <small>
            <i class="fa fa-arrow-circle-left"></i>
            <a asp-action="List">@T("Plugins.Misc.IssueManagement.Edit.ToIssueList")</a>
        </small>
    </h1>
    <div class="pull-right">
        <span id="issue-delete" class="btn bg-red">
            <i class="fa fa-trash-o"></i>
            @T("Admin.Common.Delete")
        </span>
    </div>
</div>
<div class="content">
    <div class="form-horizontal">
        <nop-panels id="issue-panels">
            <nop-panel asp-name="basicInfoPanel"
                       asp-icon="fa fa-info"
                       asp-title="@T("Plugins.Misc.IssueManagement.Edit.BasicInfoPanel.Title")"
                       asp-hide-block-attribute-name="@hideBasicInfoBlockAttributeName"
                       asp-hide="@hideBasicInfoPanel"
                       asp-advanced="false">
                <div class="panel-body">
                    <div id="basicInfoFormContainer">
                        @await Html.PartialAsync("~/Plugins/Misc.IssueManagement/Views/Index/_BasicInfo.cshtml", Model.BasicInfoPanelModel)
                    </div>
                    <div class="form-group">
                        <div class="col-md-9 col-md-offset-3">
                            <button type="button" id="saveBasicInfo" class="btn btn-primary">
                                @T("Plugins.Misc.IssueManagement.Edit.BasicInfoPanel.SaveButton")
                            </button>
                        </div>
                    </div>
                </div>
            </nop-panel>
            <nop-panel asp-name="personsInvolvedPanel"
                       asp-icon="fa fa-users"
                       asp-title="@T("Plugins.Misc.IssueManagement.Edit.PersonsInvolvedPanel.Title")"
                       asp-hide-block-attribute-name="@hidePersonsInvolvedBlockAttributeName"
                       asp-hide="@hidePersonsInvolvedPanel"
                       asp-advanced="false">
                @await Html.PartialAsync("~/Plugins/Misc.IssueManagement/Views/Index/_PersonsInvolved.cshtml", Model.PersonsInvolvedPanelModel)
            </nop-panel>
            <nop-panel asp-name="assignmentsPanel"
                       asp-icon="fa fa-sitemap"
                       asp-title="@T("Plugins.Misc.IssueManagement.Edit.AssignmentsPanel.Title")"
                       asp-hide-block-attribute-name="@hideAssignmentsBlockAttributeName"
                       asp-hide="@hideAssignmentsPanel"
                       asp-advanced="false">
                @await Html.PartialAsync("~/Plugins/Misc.IssueManagement/Views/Index/_Assignments.cshtml", Model.AssignmentsPanelModel)
            </nop-panel>
            <nop-panel asp-name="historyPanel"
                       asp-icon="fa fa-list"
                       asp-title="@T("Plugins.Misc.IssueManagement.Edit.HistoryPanel.Title")"
                       asp-hide-block-attribute-name="@hideHistoryBlockAttributeName"
                       asp-hide="@hideHistoryPanel"
                       asp-advanced="false">
                @await Html.PartialAsync("~/Plugins/Misc.IssueManagement/Views/Index/_History.cshtml", Model.HistoryPanelModel)
            </nop-panel>
        </nop-panels>
    </div>
</div>

<nop-delete-confirmation asp-model-id="@Model.Id" asp-button-id="issue-delete" />

<script>
    var basicInfoScope = function () {
        var self = {};

        function serializeForm() {
            var data = {};

            data.Id = '@Model.Id';
            data.name = $('#basicInfoPanel #Name').val();
            data.description = $('#basicInfoPanel #Description').val();
            data.deadline = $('#basicInfoPanel #Deadline').val();
            data.priority = $('#basicInfoPanel #Priority').val();
            data.status = $('#basicInfoPanel #Status').val();

            return data;
        }

        function saveBasicInfo() {
            var saveButton = $('#basicInfoPanel #saveBasicInfo');
            saveButton.prop('disabled', true);
            var data = serializeForm();

            $.ajax({
                cache: false,
                type: "POST",
                url: '@Url.Action("SaveBasicInfo", "Issue")',
                data: data,
                success: function (data) {
                    if (data.Result) {
                        window.location.reload();
                    } else {
                        $('#basicInfoFormContainer').html(data);
                        var form = $('#basicInfoForm');
                        form.unbind();
                        form.data('validator', null);
                        $.validator.unobtrusive.parse('#basicInfoForm');
                        form.validate(form.data('unobtrusiveValidation').options);
                    }

                    saveButton.prop('disabled', false);
                },
                error: function () {
                    saveButton.prop('disabled', false);
                }
            });
        }

        function bindEvents() {
            $('#saveBasicInfo').on('click', saveBasicInfo);
        }

        self.initialize = function () {
            bindEvents();
        }

        return self;
    }();

    var assignmentsScope = function () {
        var self = {};

        function onAddAssignmentButtonClick() {
            var addAssignmentButton = $('#addAssignment');
            var comboBox = $('#assignmentsPanel #ObjectId').data('kendoComboBox');
            var assignmentType = $('#assignmentsPanel #AssignmentType').val();
            comboBox.enable(false);
            addAssignmentButton.prop('disabled', true);
            var data = {
                objectId: comboBox.value(),
                issueId: '@Model.Id',
                assignmentType: assignmentType,
            };

            $.ajax({
                cache: false,
                type: "POST",
                url: '@Url.Action("AddAssignment", "Issue")',
                data: data,
                success: function (data) {
                    if (data.Result) {
                        updateTable('#assignmentsGrid');
                        comboBox.value(null);
                        comboBox.enable(true);
                        updateTable('#historyGrid');
                    } else {
                        display_nop_error(data);
                        addAssignmentButton.prop('disabled', false);
                    }
                },
                error: function () {
                    comboBox.enable(true);
                    addAssignmentButton.prop('disabled', false);
                }
            });
        }

        function onAssignmentComboBoxChange(e) {
            var addAssignmentButton = $('#addAssignment');
            if (e.sender.selectedIndex === -1) {
                addAssignmentButton.prop('disabled', true);
            } else {
                addAssignmentButton.prop('disabled', false);
            }
        }

        function createAssignmentsComboBox() {
            $('#assignmentsPanel #ObjectId').kendoComboBox({
                placeholder: '@T("Plugins.Misc.IssueManagement.Edit.AssignmentsPanel.AddAssignmentsSubPanel.AddAssignmentComboBox.Placeholder")',
                dataTextField: 'Text',
                dataValueField: 'Value',
                minLength: 3,
                autoBind: false,
                filter: 'contains',
                change: onAssignmentComboBoxChange,
                dataSource: {
                    serverFiltering: true,
                    transport: {
                        read: {
                            type: 'POST',
                            url: '@Url.Action("GetAssignmentsForAddComboBox", "Issue")',
                            dataType: 'json',
                            data: function (e) {
                                var assignmentType = $('#assignmentsPanel #AssignmentType').val();

                                var data = {
                                    assignmentType: assignmentType,
                                    issueId: '@Model.Id',
                                };

                                if (e.filter && e.filter.filters && e.filter.filters[0]) {
                                    data.text = e.filter.filters[0].value;
                                }

                                return data;
                            },
                        }
                    }
                }
            });
        }

        function bindEvents() {
            $('#addAssignment').on('click', onAddAssignmentButtonClick);
        }

        function renderProductAssignment(row) {
            var productUrl = '@Url.Action("Edit", "Product", new { id = "__ID__", area = "Admin" })';
            productUrl = productUrl.replace("__ID__", row.ObjectId);

            var template = '<i class="mr-1 fa fa-book" title="@T("Enums.Nop.Plugin.Misc.IssueManagement.Domain.IssueAssignmentType.Product")"></i>' +
                '<a href="' + productUrl + '">' + row.Details.Name + '</a>';
            return template;
        }

        self.renderAssignmentInfoTemplate = function (data, type, row, meta) {
            var template = '';

            switch (row.AssignmentType) {
                case @((byte)IssueAssignmentType.Product):
                    template += renderProductAssignment(row);
                    break;
                default:
                    break;
            }

            return template;
        }

        self.initialize = function () {
            createAssignmentsComboBox();
            bindEvents();
        }

        return self;
    }();

    var personsInvolvedScope = function () {
        var self = {};

        function onAddPersonInvolvedButtonClick() {
            var addPersonInvolvedButton = $('#addPersonInvolved');
            var comboBox = $('#personsInvolvedPanel #CustomerId').data('kendoComboBox');
            comboBox.enable(false);
            addPersonInvolvedButton.prop('disabled', true);
            var data = {
                customerId: comboBox.value(),
                issueId: '@Model.Id',
            };

            $.ajax({
                cache: false,
                type: "POST",
                url: '@Url.Action("AddPersonInvolved", "Issue")',
                data: data,
                success: function (data) {
                    if (data.Result) {
                        updateTable('#personsInvolvedGrid');
                        comboBox.value(null);
                        comboBox.enable(true);
                        updateTable('#historyGrid');
                    } else {
                        display_nop_error(data);
                        addPersonInvolvedButton.prop('disabled', false);
                    }
                },
                error: function () {
                    comboBox.enable(true);
                    addPersonInvolvedButton.prop('disabled', false);
                }
            });
        }

        function onPersonsInvolvedComboBoxChange(e) {
            var addPersonInvolvedButton = $('#addPersonInvolved');
            if (e.sender.selectedIndex === -1) {
                addPersonInvolvedButton.prop('disabled', true);
            } else {
                addPersonInvolvedButton.prop('disabled', false);
            }
        }

        function createPersonsInvolvedComboBox() {
            $('#personsInvolvedPanel #CustomerId').kendoComboBox({
                placeholder: '@T("Plugins.Misc.IssueManagement.Edit.PersonsInvolvedPanel.AddPersonsInvolvedSubPanel.AddPersonComboBox.Placeholder")',
                dataTextField: 'Text',
                dataValueField: 'Value',
                minLength: 3,
                autoBind: false,
                filter: 'contains',
                change: onPersonsInvolvedComboBoxChange,
                dataSource: {
                    serverFiltering: true,
                    transport: {
                        read: {
                            type: 'POST',
                            url: '@Url.Action("GetPersonsInvolvedForAddComboBox", "Issue")',
                            dataType: 'json',
                            data: function (e) {
                                var data = {
                                    issueId: '@Model.Id',
                                };

                                if (e.filter && e.filter.filters && e.filter.filters[0]) {
                                    data.text = e.filter.filters[0].value;
                                }

                                return data;
                            },
                        }
                    }
                }
            });
        }

        function bindEvents() {
            $('#addPersonInvolved').on('click', onAddPersonInvolvedButtonClick);
        }

        self.initialize = function () {
            createPersonsInvolvedComboBox();
            bindEvents();
        }

        return self;
    }();

    var historyScope = function () {
        var self = {};

        function getAssignmentTypeName(assignmentType) {
            var name = '';

            switch (assignmentType) {
                case @((byte)IssueAssignmentType.Product):
                    name = '@T("Enums.Nop.Plugin.Misc.IssueManagement.Domain.IssueAssignmentType.Product")';
                    break;
                default:
                    break;
            }

            return name.toLowerCase();
        }

        function renderAssignmentChange(row) {
            var changeDetails = row.ChangeDetails;
            var assignmentTypeName = getAssignmentTypeName(changeDetails.AssignmentType);
            var template = '';

            if (changeDetails.NewValue) {
                template += '@T("Plugins.Misc.IssueManagement.Edit.Historypanel.Grid.Columns.Change.Added")';
            } else {
                template += '@T("Plugins.Misc.IssueManagement.Edit.Historypanel.Grid.Columns.Change.Removed")';
            }

            template += ' ' + assignmentTypeName + ' ' + changeDetails.Name;
            return template;
        }

        function renderPersonInvolvedChange(row) {
            var changeDetails = row.ChangeDetails;
            var template = '';

            if (changeDetails.NewValue) {
                template += '@T("Plugins.Misc.IssueManagement.Edit.Historypanel.Grid.Columns.Change.Added")';
            } else {
                template += '@T("Plugins.Misc.IssueManagement.Edit.Historypanel.Grid.Columns.Change.Removed")';
            }

            template += ' ' + changeDetails.FullName + ' (' + changeDetails.Email + ')';
            return template;
        }

        function getBasicInfoChangeTypeName(changeType) {
            var name = '';

            switch (changeType) {
                case @((byte)IssueChangeType.Name):
                    name = '@T("Enums.Nop.Plugin.Misc.IssueManagement.Domain.IssueChangeType.Name")';
                    break;
                case @((byte)IssueChangeType.Description):
                    name = '@T("Enums.Nop.Plugin.Misc.IssueManagement.Domain.IssueChangeType.Description")';
                    break;
                case @((byte)IssueChangeType.Deadline):
                    name = '@T("Enums.Nop.Plugin.Misc.IssueManagement.Domain.IssueChangeType.Deadline")';
                    break;
                case @((byte)IssueChangeType.Priority):
                    name = '@T("Enums.Nop.Plugin.Misc.IssueManagement.Domain.IssueChangeType.Priority")';
                    break;
                case @((byte)IssueChangeType.Status):
                    name = '@T("Enums.Nop.Plugin.Misc.IssueManagement.Domain.IssueChangeType.Status")';
                    break;
                default:
                    break;
            }

            return name.toLowerCase();
        }

        function getPriorityName(priority) {
            var name = '';
            switch (priority) {
                case '@((byte)IssuePriority.Low)':
                    name = '@T("Enums.Nop.Plugin.Misc.IssueManagement.Domain.IssuePriority.Low")';
                    break;
                case '@((byte)IssuePriority.Normal)':
                    name = '@T("Enums.Nop.Plugin.Misc.IssueManagement.Domain.IssuePriority.Normal")';
                    break;
                case '@((byte)IssuePriority.Important)':
                    name = '@T("Enums.Nop.Plugin.Misc.IssueManagement.Domain.IssuePriority.Important")';
                    break;
                case '@((byte)IssuePriority.Urgent)':
                    name = '@T("Enums.Nop.Plugin.Misc.IssueManagement.Domain.IssuePriority.Urgent")';
                    break;
                case '@((byte)IssuePriority.Critical)':
                    name = '@T("Enums.Nop.Plugin.Misc.IssueManagement.Domain.IssuePriority.Critical")';
                    break;
                default:
                    break;
            }

            return name;
        }

        function getStatusName(status) {
            var name = '';
            switch (status) {
                case '@((byte)IssueStatus.Closed)':
                    name = '@T("Enums.Nop.Plugin.Misc.IssueManagement.Domain.IssueStatus.Closed")';
                    break;
                case '@((byte)IssueStatus.InProgress)':
                    name = '@T("Enums.Nop.Plugin.Misc.IssueManagement.Domain.IssueStatus.InProgress")';
                    break;
                case '@((byte)IssueStatus.New)':
                    name = '@T("Enums.Nop.Plugin.Misc.IssueManagement.Domain.IssueStatus.New")';
                    break;
                default:
                    break;
            }

            return name;
        }

        function renderBasicInfoChange(row) {
            var changeDetails = row.ChangeDetails;
            var changeTypeName = getBasicInfoChangeTypeName(row.ChangeType);

            switch (row.ChangeType) {
                case @((byte)IssueChangeType.Priority):
                    changeDetails.NewValue = getPriorityName(changeDetails.NewValue);
                    changeDetails.OldValue = getPriorityName(changeDetails.OldValue);
                    break;
                case @((byte)IssueChangeType.Status):
                    changeDetails.NewValue = getStatusName(changeDetails.NewValue);
                    changeDetails.OldValue = getStatusName(changeDetails.OldValue);
                    break;
            }

            var template = '@T("Plugins.Misc.IssueManagement.Edit.Historypanel.Grid.Columns.Change.Changed")' + ' ' + changeTypeName + ' ' +
                '@T("Plugins.Misc.IssueManagement.Edit.Historypanel.Grid.Columns.Change.From")' + ' "' + changeDetails.OldValue + '" ' +
                '@T("Plugins.Misc.IssueManagement.Edit.Historypanel.Grid.Columns.Change.To")' + ' "' + changeDetails.NewValue + '"';
            return template;
        }

        self.renderChange = function (data, type, row, meta) {
            var template = '';

            switch (row.ChangeType) {
                case @((byte)IssueChangeType.Assignment):
                    template = renderAssignmentChange(row);
                    break;
                case @((byte)IssueChangeType.PersonInvolved):
                    template = renderPersonInvolvedChange(row);
                    break;
                default:
                    template = renderBasicInfoChange(row);
                    break;
            }

            return template;
        }

        return self;
    }();

    $(document).ready(function () {
        basicInfoScope.initialize();
        personsInvolvedScope.initialize();
        assignmentsScope.initialize();
    });
</script>