@using Nop.Plugin.Misc.IssueManagement.Models
@using Nop.Plugin.Misc.IssueManagement.Domain

@model IssueSearchModel

@{
    Layout = "_AdminLayout";
    ViewBag.PageTitle = T("Plugins.Misc.IssueManagement.List.Title").Text;
    Html.SetActiveMenuItemSystemName("All issues");
    Html.AppendScriptParts("~/lib_npm/chart.js/Chart.min.js");
    Html.AddCssFileParts(ResourceLocation.Head, "~/Plugins/Misc.IssueManagement/Content/index.css");
    Html.AddCssFileParts(ResourceLocation.Head, "~/Plugins/Misc.IssueManagement/Content/List/index.css");
}

@{
    const string hideFiltersBlockAttributeName = "Plugins.Misc.IssueManagement.List.FiltersPanel";
    var hideFiltersBlock = genericAttributeService.GetAttribute<bool>(workContext.CurrentCustomer, hideFiltersBlockAttributeName);

    const string hideChartsBlockAttributeName = "Plugins.Misc.IssueManagement.List.ChartsPanel";
    var hideChartsBlock = genericAttributeService.GetAttribute<bool>(workContext.CurrentCustomer, hideChartsBlockAttributeName);

    const string hideIssueCountPerStatusChartAttributeName = "Plugins.Misc.IssueManagement.List.ChartsPanel.IssueCountPerStatusChartPanel";
    const string hideIssueCountPerPriorityChartAttributeName = "Plugins.Misc.IssueManagement.List.ChartsPanel.IssueCountPerPriorityChartPanel";
}

<form asp-controller="Issue" asp-action="IssueList" method="post">
    <div class="content-header clearfix">
        <h1 class="pull-left">
            @T("Plugins.Misc.IssueManagement.List.Issues")
        </h1>
        <div class="pull-right">
            <a asp-action="Add" class="btn bg-blue">
                <i class="fa fa-plus-square"></i>
                @T("Admin.Common.AddNew")
            </a>
        </div>
    </div>
    <div class="content">
        <div class="form-horizontal">
            <div class="panel-group">
                <nop-panel asp-name="chartsPanel"
                           asp-icon="fa fa-bar-chart"
                           asp-title="@T("Plugins.Misc.IssueManagement.List.ChartsPanel.Title")"
                           asp-hide-block-attribute-name="@hideChartsBlockAttributeName"
                           asp-hide="@hideChartsBlock"
                           asp-advanced="false">
                    @await Html.PartialAsync("~/Plugins/Misc.IssueManagement/Views/List/_Charts.cshtml")
                </nop-panel>
                <div class="panel panel-default panel-search">
                    <div class="panel-body">
                        <div class="row search-row @(!hideFiltersBlock ? "opened" : "")" data-hideAttribute="@hideFiltersBlockAttributeName">
                            <div class="search-text">@T("Admin.Common.Search")</div>
                            <div class="icon-search"><i class="fa fa-search" aria-hidden="true"></i></div>
                            <div class="icon-collapse"><i class="fa fa-angle-down" aria-hidden="true"></i></div>
                        </div>
                        <div class="search-body @(hideFiltersBlock ? "closed" : "")">
                            @await Html.PartialAsync("~/Plugins/Misc.IssueManagement/Views/List/_Filters.cshtml", Model)
                        </div>
                    </div>
                </div>
                <div class="panel panel-default">
                    <div class="panel-body">
                        @await Html.PartialAsync("~/Plugins/Misc.IssueManagement/Views/List/_Grid.cshtml", Model)
                    </div>
                </div>
            </div>
        </div>
    </div>
</form>

<script>
    var filtersScope = function () {
        var self = {};

        function createStatusesMultiSelect() {
            var issueStatusesMultiSelect = $('#SearchIssueStatus').data('kendoMultiSelect');
            issueStatusesMultiSelect.setOptions({
                autoClose: false,
                filter: 'contains',
            });
        }

        function createPrioritiesMultiSelect() {
            var issuePrioritiesMultiSelect = $('#SearchIssuePriority').data('kendoMultiSelect');
            issuePrioritiesMultiSelect.setOptions({
                autoClose: false,
                filter: 'contains',
            });
        }

        function createDeadlineFromDateTimePicker() {
            var input = $('#SearchDeadlineFrom');
            input.kendoDateTimePicker({
                dateInput: true,
                timeFormat: 'hh:mm',
            });

            input.data('kendoDateTimePicker').value(null);
            input.attr('readonly', true);

            var clearButton = '<span id="clearSearchDeadlineFrom" class="k-link k-link-clear" aria-label="Clear the DateTimePicker"><span unselectable="on" class="k-icon k-i-close" aria-controls="dtp_timeview"></span></span>';
            input.data('kendoDateTimePicker').wrapper.find(".k-select").append(clearButton);

            $("#clearSearchDeadlineFrom").on("click", function (e) {
                input.data('kendoDateTimePicker').value(null)
            });
        }

        function createDeadlineToDateTimePicker() {
            var input = $('#SearchDeadlineTo');
            input.kendoDateTimePicker({
                dateInput: true,
                timeFormat: 'hh:mm',
            });

            input.data('kendoDateTimePicker').value(null);
            input.attr('readonly', true);

            var clearButton = '<span id="clearSearchDeadlineTo" class="k-link k-link-clear" aria-label="Clear the DateTimePicker"><span unselectable="on" class="k-icon k-i-close" aria-controls="dtp_timeview"></span></span>';
            input.data('kendoDateTimePicker').wrapper.find(".k-select").append(clearButton);

            $('#clearSearchDeadlineTo').on("click", function (e) {
                input.data('kendoDateTimePicker').value(null)
            });
        }

        self.initialize = function () {
            createStatusesMultiSelect();
            createPrioritiesMultiSelect();
            createDeadlineFromDateTimePicker();
            createDeadlineToDateTimePicker();
        }

        return self;
    }();

    var gridScope = function () {
        var self = {};

        self.renderIssuePriority = function(data, type, row, meta) {
            var color;
            switch (row.Priority) {
                case @((byte)IssuePriority.Low):
                    color = 'gray';
                    break;
                case @((byte)IssuePriority.Normal):
                    color = 'blue';
                    break;
                case @((byte)IssuePriority.Important):
                    color = 'yellow';
                    break;
                case @((byte)IssuePriority.Urgent):
                    color = 'lightCoral';
                    break;
                case @((byte)IssuePriority.Critical):
                    color = 'red';
                    break;
                default:
                    color = '';
                    break;
            }

            return '<span class="grid-report-item ' + color + '">' + data + '</span >';
        }

        self.renderIssueStatus = function(data, type, row, meta) {
           var color;
           switch (row.Status) {
                case @((byte)IssueStatus.Closed):
                    color = 'green';
                    break;
                case @((byte)IssueStatus.InProgress):
                    color = 'blue';
                    break;
                case @((byte)IssueStatus.New):
                    color = 'gray';
                    break;
                default:
                    color = '';
                    break;
            }

            return '<span class="grid-report-item ' + color + '">' + data + '</span >';
        }

        return self;
    }();

    var chartsScope = function () {
        var self = {}

        var isIssueCountPerStatusChartLoaded = false;
        var isIssueCountPerPriorityChartLoaded = false;

        var issueCountPerStatusChart;
        var issueCountPerPriorityChart;

        function createIssueCountPerStatusChart() {
            issueCountPerStatusChart = new Chart(document.getElementById('issueCountPerStatusChart'), {
                type: 'bar',
                data: {
                    datasets: [{
                        barPercentage: 0.5,
                        barThickness: 6,
                        maxBarThickness: 8,
                        minBarLength: 2,
                        backgroundColor: [
                            'rgba(160, 160, 160, 1)',
                            'rgba(0, 192, 239, 1)',
                            'rgba(0, 166, 90, 1)',
                        ],
                    }],
                },
                options: {
                    legend: {
                        display: false
                    },
                    scales: {
                        xAxes: [{
                            gridLines: {
                                offsetGridLines: true,
                            },
                        }],
                        yAxes: [{
                            ticks: {
                                beginAtZero: true,
                                stepSize: 1,
                            }
                        }],
                    },
                },
            });
        }

        function createIssueCountPerPriorityChart() {
            issueCountPerPriorityChart = new Chart(document.getElementById('issueCountPerPriorityChart'), {
                type: 'bar',
                data: {
                    datasets: [{
                        barPercentage: 0.5,
                        barThickness: 6,
                        maxBarThickness: 8,
                        minBarLength: 2,
                        backgroundColor: [
                            'rgba(160, 160, 160, 1)',
                            'rgba(0, 192, 239, 1)',
                            'rgba(243, 156, 18, 1)',
                            'rgba(240, 128, 128, 1)',
                            'rgba(221, 75, 57, 1)',
                        ],
                    }],
                },
                options: {
                    legend: {
                        display: false
                    },
                    scales: {
                        xAxes: [{
                            gridLines: {
                                offsetGridLines: true,
                            },
                        }],
                        yAxes: [{
                            ticks: {
                                beginAtZero: true,
                                stepSize: 1,
                            }
                        }],
                    },
                },
            });
        }

        function loadIssueCountPerStatusStatistics() {
            isIssueCountPerStatusChartLoaded = true;

            var csLabels = [];
            var csData = [];

            $.ajax({
                cache: false,
                type: "GET",
                url: "@Url.Action("LoadIssueCountPerStatusStatistics", "Issue")",
                success: function (data) {
                    for (var group in data) {
                        csLabels.push(group);
                        csData.push(data[group]);
                    }

                    if (!issueCountPerStatusChart) {
                        createIssueCountPerStatusChart();
                    }

                    issueCountPerStatusChart.config.data.labels = csLabels;
                    issueCountPerStatusChart.config.data.datasets[0].data = csData;
                    issueCountPerStatusChart.update();
                },
            });
        }

        function loadIssueCountPerPriorityStatistics() {
            isIssueCountPerPriorityChartLoaded = true;

            var csLabels = [];
            var csData = [];

            $.ajax({
                cache: false,
                type: "GET",
                url: "@Url.Action("LoadIssueCountPerPriorityStatistics", "Issue")",
                success: function (data) {
                    for (var group in data) {
                        csLabels.push(group);
                        csData.push(data[group]);
                    }

                    if (!issueCountPerPriorityChart) {
                        createIssueCountPerPriorityChart();
                    }

                    issueCountPerPriorityChart.config.data.labels = csLabels;
                    issueCountPerPriorityChart.config.data.datasets[0].data = csData;
                    issueCountPerPriorityChart.update();
                },
            });
        }

        function loadIssueCountPerStatusIfNotCollapsed() {
            var isIssueCountPerStatusCollapsed = $('#issueCountPerStatusBox').hasClass('collapsed-box');
            if (!isIssueCountPerStatusCollapsed) {
                loadIssueCountPerStatusStatistics();
            }
        }

        function loadIssueCountPerPriorityIfNotCollapsed() {
            var isIssueCountPerPriorityCollapsed = $('#issueCountPerPriorityBox').hasClass('collapsed-box');
            if (!isIssueCountPerPriorityCollapsed) {
                loadIssueCountPerPriorityStatistics();
            }
        }

        function loadStatisticsIfNotCollapsed() {
            var isChartsPanelCollapsed = '@hideChartsBlock' === 'True';
            if (!isChartsPanelCollapsed) {
                loadIssueCountPerStatusIfNotCollapsed();
                loadIssueCountPerPriorityIfNotCollapsed();
            }
        }

        function bindEvents() {
            $('#chartsPanel .panel-heading').on('click', function (e) {
                var collapsed = !e.currentTarget.classList.contains('opened');
                if (!collapsed) {
                    if (!isIssueCountPerStatusChartLoaded) {
                        loadIssueCountPerStatusIfNotCollapsed();
                    }

                    if (!isIssueCountPerPriorityChartLoaded) {
                        loadIssueCountPerPriorityIfNotCollapsed();
                    }
                }
            });

            $('#issueCountPerStatusBox').on('click', 'button[data-widget="collapse"]', function () {
                var collapsed = !$('#issueCountPerStatusBox').hasClass('collapsed-box');
                saveUserPreferences('@(Url.Action("SavePreference", "Preferences"))', '@hideIssueCountPerStatusChartAttributeName', collapsed);

                if (!collapsed && !isIssueCountPerStatusChartLoaded) {
                    loadIssueCountPerStatusStatistics();
                }
            });

            $('#issueCountPerPriorityBox').on('click', 'button[data-widget="collapse"]', function () {
                var collapsed = !$('#issueCountPerPriorityBox').hasClass('collapsed-box');
                saveUserPreferences('@(Url.Action("SavePreference", "Preferences"))', '@hideIssueCountPerPriorityChartAttributeName', collapsed);

                if (!collapsed && !isIssueCountPerPriorityChartLoaded) {
                    loadIssueCountPerPriorityStatistics();
                }
            });
        }

        self.initialize = function () {
            bindEvents();
            loadStatisticsIfNotCollapsed();
        }

        return self;
    }();

    $(document).ready(function () {
        filtersScope.initialize();
        chartsScope.initialize();
    });
</script>